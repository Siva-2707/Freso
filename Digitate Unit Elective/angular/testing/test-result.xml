<?xml version="1.0"?>
<testsuite name="HeadlessChrome 0.0.0 (Windows 10 0.0.0)" package="unit" timestamp="2021-06-08T14:10:31" id="0" hostname="XPS9500" tests="11" errors="0" failures="0" time="0.671">
  <properties>
    <property name="browser.fullName" value="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/91.0.4472.77 Safari/537.36"/>
  </properties>
  <testcase name="RegisterComponent should create" time="0.092" classname="unit.RegisterComponent"/>
  <testcase name="RegisterComponent should submit form: registerform isEdit false" time="0.077" classname="unit.RegisterComponent"/>
  <testcase name="RegisterComponent should submit form: registerform isEdit false2" time="0.08" classname="unit.RegisterComponent"/>
  <testcase name="RegisterComponent should submit form: registerform isEdit true" time="0.093" classname="unit.RegisterComponent"/>
  <testcase name="RegisterComponent should submit form: registerform isEdit true2" time="0.067" classname="unit.RegisterComponent"/>
  <testcase name="RegisterComponent should execute cancel method" time="0.063" classname="unit.RegisterComponent"/>
  <testcase name="HomeComponent should create" time="0.087" classname="unit.HomeComponent"/>
  <testcase name="HomeComponent should navigate to register component when calling addNewMember" time="0.04" classname="unit.HomeComponent"/>
  <testcase name="HomeComponent should execute edit method" time="0.033" classname="unit.HomeComponent"/>
  <testcase name="HomeComponent should execute delete method" time="0.029" classname="unit.HomeComponent"/>
  <testcase name="NavbarComponent should create" time="0.01" classname="unit.NavbarComponent"/>
  <system-out>
    <![CDATA[HeadlessChrome 0.0.0 (Windows 10 0.0.0) WARN: '
      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true
      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for
      you. We recommend using this approach to avoid 'changed after checked' errors.
       
      Example: 
      form = new FormGroup({
        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),
        last: new FormControl('Drew', Validators.required)
      });
    '
,HeadlessChrome 0.0.0 (Windows 10 0.0.0) WARN: '
      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true
      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for
      you. We recommend using this approach to avoid 'changed after checked' errors.
       
      Example: 
      form = new FormGroup({
        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),
        last: new FormControl('Drew', Validators.required)
      });
    '
,HeadlessChrome 0.0.0 (Windows 10 0.0.0) WARN: '
      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true
      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for
      you. We recommend using this approach to avoid 'changed after checked' errors.
       
      Example: 
      form = new FormGroup({
        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),
        last: new FormControl('Drew', Validators.required)
      });
    '
,HeadlessChrome 0.0.0 (Windows 10 0.0.0) WARN: '
      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true
      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for
      you. We recommend using this approach to avoid 'changed after checked' errors.
       
      Example: 
      form = new FormGroup({
        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),
        last: new FormControl('Drew', Validators.required)
      });
    '
,HeadlessChrome 0.0.0 (Windows 10 0.0.0) WARN: '
      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true
      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for
      you. We recommend using this approach to avoid 'changed after checked' errors.
       
      Example: 
      form = new FormGroup({
        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),
        last: new FormControl('Drew', Validators.required)
      });
    '
,HeadlessChrome 0.0.0 (Windows 10 0.0.0) WARN: '
      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true
      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for
      you. We recommend using this approach to avoid 'changed after checked' errors.
       
      Example: 
      form = new FormGroup({
        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),
        last: new FormControl('Drew', Validators.required)
      });
    '

]]>
  </system-out>
  <system-err/>
</testsuite>